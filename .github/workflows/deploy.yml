name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        # 코드 저장소를 체크아웃함

      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
        # Amazon Corretto JDK 17을 설정함

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        # Gradle wrapper 파일에 실행 권한을 부여함

#      - name: Build with Gradle
#        run: ./gradlew clean build
#        # Gradle을 사용하여 프로젝트를 빌드


      - name: Create application-my.yml file
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch application-my.yml
          echo "amadeus:" > application-my.yml
          echo "  api:" >> application-my.yml
          echo "    key: ${{ secrets.AMADEUS_API_KEY }}" >> application-my.yml
          echo "    secret: ${{ secrets.AMADEUS_API_SECRET }}" >> application-my.yml
          echo "spring:" >> application-my.yml
          echo "  jpa:" >> application-my.yml
          echo "    hibernate:" >> application-my.yml
          echo "      ddl-auto: none" >> application-my.yml
          echo "  datasource:" >> application-my.yml
          echo "    url: jdbc:mysql://${{ secrets.MYSQL_HOST }}:${{ secrets.MYSQL_PORT }}/${{ secrets.MYSQL_DATABASE }}" >> application-my.yml
          echo "    username: ${{ secrets.MYSQL_USERNAME }}" >> application-my.yml
          echo "    password: ${{ secrets.MYSQL_PASSWORD }}" >> application-my.yml
          echo "    driver-class-name: com.mysql.cj.jdbc.Driver" >> application-my.yml
          echo "  data:" >> application-my.yml
          echo "    redis:" >> application-my.yml
          echo "      host: ${{ secrets.REDIS_HOST }}" >> application-my.yml
          echo "      port: ${{ secrets.REDIS_PORT }}" >> application-my.yml
          echo "      password: ${{ secrets.REDIS_PASSWORD }}" >> application-my.yml
          echo "      timeout: 89000" >> application-my.yml
          echo "  security:" >> application-my.yml
          echo "    oauth2:" >> application-my.yml
          echo "      client:" >> application-my.yml
          echo "        registration:" >> application-my.yml
          echo "          kakao:" >> application-my.yml
          echo "            client-id: ${{ secrets.KAKAO_CLIENT_ID }}" >> application-my.yml
          echo "            client-secret: ${{ secrets.KAKAO_CLIENT_SECRET }}" >> application-my.yml
          echo "            redirect-uri: https://api.thetravelday.co.kr/login/oauth2/code/kakao" >> application-my.yml
          echo "            client-authentication-method: client_secret_post" >> application-my.yml
          echo "            authorization-grant-type: authorization_code" >> application-my.yml
          echo "            scope: profile_nickname" >> application-my.yml
          echo "            client-name: Kakao" >> application-my.yml
          echo "      provider:" >> application-my.yml
          echo "        kakao:" >> application-my.yml
          echo "          authorization-uri: https://kauth.kakao.com/oauth/authorize" >> application-my.yml
          echo "          token-uri: https://kauth.kakao.com/oauth/token" >> application-my.yml
          echo "          user-info-uri: https://kapi.kakao.com/v2/user/me" >> application-my.yml
          echo "          user-name-attribute: id" >> application-my.yml
          echo "jwt:" >> application-my.yml
          echo "  secret: ${{ secrets.JWT_SECRET }}" >> application-my.yml
          echo "  access-token-expiration: 1800 # 30분" >> application-my.yml
          echo "  refresh-token-expiration: 604800 # 7일" >> application-my.yml
          echo "ClientURL: ${{ secrets.FRONT_DEPLOY_URL }}" >> application-my.yml
        shell: bash
        # application-my.yml 파일을 생성하고 설정을 삽입

      - name: Build with Gradle
        run: ./gradlew clean build
        # Gradle을 사용하여 프로젝트를 빌드

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Docker build
        run: |
          docker build -t travelday .
          docker tag travelday ghcr.io/ss0ming/travelday:latest
          docker push ghcr.io/ss0ming/travelday:latest
        # 도커 이미지 빌드하고 push

      - name: List build directory
        run: ls -al build/libs
        # 빌드 디렉터리 내용을 나열

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: TravelDay
          environment_name: TravelDay-env
          region: ap-northeast-2
          deployment_package: .deploy/Dockerrun.aws.json
          version_label: ${{github.run_id}}-${{github.sha}}
        # AWS Beanstalk에 배포
